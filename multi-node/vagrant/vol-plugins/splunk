#!/bin/bash

# Copyright 2016 David McCormick, Zopa.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

VOLUME_PATH=/var/lib/kubelet/splunk

usage() {
        err "Invalid usage. Usage: "
        err "\t$0 init"
        err "\t$0 attach <json params>"
        err "\t$0 detach <mount device>"
        err "\t$0 mount <mount dir> <mount device> <json params>"
        err "\t$0 unmount <mount dir>"
        exit 1
}

err() {
        echo -ne $* 1>&2
}

log() {
        echo -ne $* >&1
}

ismounted() {
        local MOUNT=`findmnt -n ${MNTPATH} 2>/dev/null | cut -d' ' -f1`
        if [ "${MOUNT}" == "${MNTPATH}" ]; then
                echo "1"
        else
                echo "0"
        fi
}

## given a mounted path, work out the splunkvol 'device'
mounted_device() {
        local MNTPATH=$1

        findmnt $MNTPATH | tail -1 | awk '{print $2}' | sed -e 's@^.*\(splunkvol-.*\)\].*$@\1@'
}

attach() {
	log "{\"status\": \"Not supported\"}"
}

detach() {
	log "{\"status\": \"Not supported\"}"
}

#attach() {
#        local OPTIONS=$1
#
#        DEV="splunkvol-$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
#        # ensure we haven't collided with existing volume
#        while [[ -d "${VOLUME_PATH}/${DEV}" ]]
#        do
#          DEV="splunkvol-$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
#        done
#
#        # 'attach' the new volume
#        mkdir -p ${VOLUME_PATH}/${DEV} && echo "created" >${VOLUME_PATH}/${DEV}/status
#        if [ $? -ne 0 ]; then
#                err "{ \"status\": \"Failure\", \"message\": \"Failed, couldn't create device splunk volume directory at ${VOLUME_PATH}/${DEV}\"}"
#                exit 1
#        else
#                log "{\"status\": \"Success\", \"device\":\"${DEV}\"}"
#                exit 0
#        fi
#}

#detach() {
#        local DEV=$1
#
#        echo "Running detach for device $DEV" >>/tmp/spvol.log
#
#        if [[ -d "${VOLUME_PATH}/${DEV}" ]] ; then
#                echo "detached ok..." >>/tmp/spvol.log
#                echo "detached" >${VOLUME_PATH}/${DEV}/status
#                log "{\"status\": \"Success\"}"
#                exit 0
#        else
#                log "{\"status\": \"Failed\"}"
#                exit 1
#        fi
#}

domount() {
        local MNTPATH=$1
        local DEV=$2
        local OPS=$3

        local VOLNAME="splunkvol-$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)"
        echo "Running mount of ${VOLUME_PATH}/${VOLNAME} to ${MNTPATH}" >>/tmp/spvol.log
        # check for fully mounted
        if [ $(ismounted) -eq 1 ] ; then
                log "{\"status\": \"Success\"}"
                exit 0
        fi

        mkdir -p ${MNTPATH} &> /dev/null
        mkdir -p ${VOLUME_PATH}/${VOLNAME} 2>&1 >>/tmp/spvol.log
        dd of=${VOLUME_PATH}/${VOLNAME}/sparse-volume bs=1k seek=2097152 count=0 2>&1 >>/tmp/spvol.log
        mkfs.ext4 ${VOLUME_PATH}/${VOLNAME}/sparse-volume  2>&1 >>/tmp/spvol.log
        mount ${VOLUME_PATH}/${VOLNAME}/sparse-volume ${MNTPATH} 2>&1 >>/tmp/spvol.log

        if [ $? -ne 0 ]; then
                echo "failed" >${VOLUME_PATH}/${VOLNAME}/status
                err "{ \"status\": \"Failure\", \"message\": \"Failed to mount device ${DEV} at ${MNTPATH}\"}"
                exit 1
        fi
        echo "mounted" >${VOLUME_PATH}/${VOLNAME}/status
        log "{\"status\": \"Success\"}"
        exit 0
}

unmount() {
        local MNTPATH=$1

        echo "Running umount with path ${MNTPATH}" >>/tmp/spvol.log
        if [ $(ismounted) -eq 0 ] ; then
                log "{\"status\": \"Success\"}"
                exit 0
        fi

        local DEV=$(mounted_device ${MNTPATH})
        echo "mount device is ${DEV}" >>/tmp/spvol.log
        #umount -l ${MNTPATH} &> /dev/null
        echo "running umount -l ${MNTPATH}" >>/tmp/spvol.log
        umount -l ${MNTPATH}
        if [ $? -ne 0 ]; then
                err "{ \"status\": \"Failed\", \"message\": \"Failed to unmount volume at ${MNTPATH}\"}"
                exit 1
        fi
        echo "unmounted" >${VOLUME_PATH}/${DEV}/status
        log "{\"status\": \"Success\"}"
        exit 0
}

init() {
        echo "Running init" >>/tmp/spvol.log
        [[ ! -d "${VOLUME_PATH}" ]] && mkdir -p ${VOLUME_PATH}
        log "{\"status\": \"Success\"}"
        exit 0
}

op=$1

if [[ "$op" -ne "init" && $# -lt 2 ]]; then
        usage
fi

shift

case "$op" in
        init)   init $*
                ;;
        attach)
                attach $*
                ;;
        detach)
                detach $*
                ;;
        mount)
                domount $*
                ;;
        unmount)
                unmount $*
                ;;
        *)
                usage
esac

exit 1

