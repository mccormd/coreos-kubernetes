#!/bin/bash

VERSION="0.5"

# Copyright 2016 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Configuration VARS
# RUN_LOOP_DELAY seconds - the amount of time to wait before starting another run.
# VOLUME_PATH: The location of the local sparse volumes and meta-data

# Defaults
DEFAULT_PATH=/var/lib/kubelet/bounded-local
DEFAULT_LOGGING_PATH=/var/log-collection

# Debug Logging
DEBUG="false"

# Logging backend plugin (splunk is only option at present)
LOGGING_BACKEND_PLUGIN="/opt/bin/bounded-local-splunk"

[[ -z "${VOLUME_PATH}" ]] && VOLUME_PATH=${DEFAULT_PATH}
[[ ! -e "${VOLUME_PATH}" ]] && mkdir -p ${VOLUME_PATH}
[[ -z "${LOGGING_PATH}" ]] && LOGGING_PATH=${DEFAULT_LOGGING_PATH}
[[ ! -e "${LOGGING_PATH}" ]] && mkdir -p ${LOGGING_PATH}

# log to syslog...
log() {
        echo "$*"
}

# is the path a mount or not?
ismounted() {
        local MNTPATH=$1

        local MOUNT=`findmnt -n ${MNTPATH} 2>/dev/null | cut -d' ' -f1`
        [[ "${MOUNT}" == "${MNTPATH}" ]]
        return $?
}

# Get an element of kubernetes metadata from a local cache or go looking
# for a downward-api volume called 'podinfo' in the pod.
lookup_metadata_item() {
        local META=$1
        local VOL=$2

        if [[ -f "${VOL}/${META}" ]]; then
                cat "${VOL}/${META}"
        else
                local MNTPATH=$(cat ${VOL}/mountpath)
                local PODPATH=${MNTPATH%%/volumes/*}
                if [[ -f "${PODPATH}/volumes/kubernetes.io~downward-api/podinfo/${META}" ]]; then
                        #convert all the spaces to %20 so that multiple values are now separated by spaces.
                        cat "${PODPATH}/volumes/kubernetes.io~downward-api/podinfo/${META}" |  sed -e 's/ /%20/g' | tee ${VOL}/${META}
                else
                        echo ""
                fi
        fi
}

# read collected metadata for a pod and output as a single line of values.
get_pod_metadata() {
        local VOL=$1
        local METALINE=""

        local META ELEMENT KEY VALUE METAKEY METADISPLAY

        for META in namespace::namespace podname::pod labels::label
        do
		METAKEY=${META%%::*}
		METADISPLAY=${META##*::}
                for ELEMENT in $(lookup_metadata_item ${METAKEY} ${VOL})
                do
                        if [[ -n "${ELEMENT}" ]]; then
                                ELEMENT=$(echo ${ELEMENT} | sed -e 's/%20/ /g')
                                if [[ "${ELEMENT}" =~ = ]]; then
                                        # structured key=value type fields become k8s_meta_key::value
					KEY=${ELEMENT%%=*}	
					VALUE=${ELEMENT##*=}
                                        [[ -z "${METALINE}" ]] && METALINE="k8s_${METADISPLAY}_${KEY,,}::${VALUE}" || METALINE+=" k8s_${METADISPLAY}_${KEY,,}::${VALUE}"
                                else
                                        # simple value type fields become k8s_meta::value
                                        [[ -z "${METALINE}" ]] && METALINE="k8s_${METADISPLAY}::${ELEMENT}" || METALINE+=" k8s_${METADISPLAY}::${ELEMENT}"
                                fi
                        fi
                done
        done
        echo "${METALINE}"
}

# Get kubernetes namespace and pod and then make sure we have a ro logging mount created.
check_logging_mirror() {
        local VOL=$1

        local MNTPATH=$(cat ${VOL}/mountpath)
        local PODUID=${MNTPATH%%/volumes/*}
        local PODUID=${PODUID##*/}
        local LOGMOUNT="${LOGGING_PATH}/${PODUID}"
        [[ ! -d "${LOGMOUNT}" ]] && mkdir -p ${LOGMOUNT}

        if ! ismounted ${LOGMOUNT}; then
                log "[CHANGE] Bind mounting ${VOL} to ${LOGMOUNT}"
                mount -o rbind ${VOL}/vmount ${LOGMOUNT}
                if [[ "$?" -ne 0 ]]; then
                        log "Error creating logging mirror mount!"
                        return 1
                fi
        fi

        # if using a log collector plugin then call out to check it and configure if needed. 
	if [[ -n "${LOGGING_BACKEND_PLUGIN}" ]]; then
        	if ! ${LOGGING_BACKEND_PLUGIN} check ${PODUID}; then
                	if ! ${LOGGING_BACKEND_PLUGIN} add ${PODUID} "$(get_pod_metadata ${VOL})"; then
				log "ERROR! Could not configure the log monitor via the ${LOGGING_BACKEND_PLUGIN} logging plugin."
				return 1
			fi
        	fi
	fi

        return 0
}

# when a sparse volume is removed we need to make sure that it's logging mount is also removed.
remove_logging_mirror() {
        local VOL=$1

        local MNTPATH=$(cat ${VOL}/mountpath)
        local PODUID=${MNTPATH%%/volumes/*}
        local PODUID=${PODUID##*/}
        local LOGMOUNT="${LOGGING_PATH}/${PODUID}"

	# Call out to the logging collector plugin to remove any local configuration
	if [[ -n "${LOGGING_BACKEND_PLUGIN}" ]]; then
		if ! ${LOGGING_BACKEND_PLUGIN} remove ${PODUID}; then
			log "ERROR! Removing logging configuration via the ${LOGGING_BACKEND_PLUGIN} logging plugin."
			return 1
		fi
	fi

	# remove the logging volume copy...
        if ismounted ${LOGMOUNT}; then
                log "[CHANGE] Un-mounting and removing ${LOGMOUNT}"
                umount -l ${LOGMOUNT}
                rm -rf ${LOGMOUNT}
        fi
	return 0
}

#################################################################################################################

# main loop of program (will break out if RUN_LOOP_DELAY is not set)
while true; do
        log "*** "
        log "*** Running bounded-local-controller (${VERSION}) main loop over ${VOLUME_PATH} "
        log "*** "
        for VOL in ${VOLUME_PATH}/*
        do
                [[ "${VOL}" =~ \*$ ]] && break

                SHORTVOL=${VOL%%/sparse-volume}
                SHORTVOL=${VOL##*/}

                [[ ! -f "${VOL}/status" || ! -f "${VOL}/mountpath" ]] && continue
                STATUS=$(cat ${VOL}/status | awk '{print $1}')
                WHEN=$(cat ${VOL}/status | awk '{print $2}')
                MNTPATH=$(cat ${VOL}/mountpath)

		# always maintain logging mirror regarless of volume status (to give short lived pods a chance to log)
                if [[ -f "${VOL}/mirror" ]]; then
                	[[ $(cat "${VOL}/mirror") == "true" ]] && check_logging_mirror ${VOL}
                fi

                case ${STATUS} in
                  mounted) log "${SHORTVOL} ${STATUS} since $(date -d @${WHEN} +'%Y/%m/%d %H:%M:%S')"

                           if ! ismounted ${MNTPATH}; then
                                   log "ERROR! ${SHORTVOL} is not correctly mounted to $MNTPATH, marking as failed!"
                                   TIMENOW=$(date +%s)
                                   echo "failed ${TIMENOW}" >${VOL}/status
                           fi
                           ;;

                  failed|unmounted)
                           DELAY=$(cat ${VOL}/cleanup_delay)
                           EXPIRES=$((${WHEN} + ${DELAY}))
                           TIMENOW=$(date +%s)
                           if [[ ${EXPIRES} -lt ${TIMENOW} ]]; then
                                  EXPIREDTIME=$((${TIMENOW} - ${EXPIRES}))
                                  log "Expired ${SHORTVOL} expired ${EXPIREDTIME} seconds ago"
                                  if ismounted ${VOL}/vmount; then
                                        log "[CHANGE] Un-mounting ${VOL}/vmount"
                                        umount -l ${VOL}/vmount
                                  fi

                                  if [[ -f "${VOL}/mirror" ]]; then
                                        # remove logging mirror if set to true
                                        [[ $(cat "${VOL}/mirror") == "true" ]] && remove_logging_mirror ${VOL}
                                  fi
                                  log "[CHANGE] Removing volume path: rm -rf ${VOLUME_PATH}/${SHORTVOL}"
                                  rm -rf ${VOLUME_PATH}/${SHORTVOL}
                           else
                                  TOGO=$((${EXPIRES} - ${TIMENOW}))
                                  log "${STATUS} ${SHORTVOL} has ${TOGO} secs until expiry."
                           fi
                           ;;
                  *)       log "ERROR - unknown status ${STATUS}!!!"
                           ;;
                esac
        done

        # exit loop if RUN_LOOP_DELAY not set
        [[ -z "${RUN_LOOP_DELAY}" ]] && break
        sleep ${RUN_LOOP_DELAY}
done

exit 0

